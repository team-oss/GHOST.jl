var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Public","page":"API","title":"Public","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [GHOST]\nPrivate = false","category":"page"},{"location":"api/#GHOST.GHOST","page":"API","title":"GHOST.GHOST","text":"GHOST\n\nThis is a module for collecting GitHub data about open source repositories and contributors.\n\n\n\n\n\n","category":"module"},{"location":"api/#GHOST.GitHubPersonalAccessToken","page":"API","title":"GHOST.GitHubPersonalAccessToken","text":"GitHubPersonalAccessToken(login::AbstractString,\n                          token::AbstractString,\n                          )::GitHubPersonalAccessToken\n\nA GitHub Personal Access Token\n\nFields\n\nlogin::String\ntoken::String\nclient::Client\nlimits::Limits\n\n\n\n\n\n","category":"type"},{"location":"api/#GHOST.find_queries-Tuple{AbstractString}","page":"API","title":"GHOST.find_queries","text":"find_queries(spdx::AbstractString)\n\n\n\n\n\n","category":"method"},{"location":"api/#GHOST.find_repos-Tuple{DataFrames.AbstractDataFrame}","page":"API","title":"GHOST.find_repos","text":"find_repos(batch::AbstractDataFrame)::Nothing\n\nTakes a batch of 10 spdx/createdat and puts the data in the database.\n\n\n\n\n\n","category":"method"},{"location":"api/#GHOST.graphql","page":"API","title":"GHOST.graphql","text":"graphql(obj::GitHubPersonalAccessToken,\n        operationName::AbstractString,\n        vars::Dict{String};\n        max_retries::Integer = 3)\n\nReturn JSON of the GraphQL query.\n\n\n\n\n\n","category":"function"},{"location":"api/#GHOST.licenses-Tuple{}","page":"API","title":"GHOST.licenses","text":"licenses(conn::Connection,\n         pat::GitHubPersonalAccessToken,\n         schema::AbstractString = \"gh_2007_$(Dates.year(floor(now(), Year) - Day(1)))\",\n         )::Nothing\n\nUploads the licenses table to the database. It includes every OSI-approved license that is machine readable with Licensee.\n\n\n\n\n\n","category":"method"},{"location":"api/#GHOST.queries-Tuple{AbstractString}","page":"API","title":"GHOST.queries","text":"queries(conn::Connection,\n        spdx::AbstractString,\n        schema::AbstractString = \"gh_2007_$(Dates.year(floor(now(), Year) - Day(1)))\")\n\nThis will upload the queries to the database with:\n\nspdx::text NOT NULL\ncreated::tsrange NOT NULL\ncount::smallint NOT NULL\nasof::time\ndone::bool NOT NULL\n\n\n\n\n\n","category":"method"},{"location":"api/#GHOST.query_commits-Tuple{AbstractArray{var\"#s20\",1} where var\"#s20\"<:AbstractString,Integer}","page":"API","title":"GHOST.query_commits","text":"query_commits(branches::AbstractVector{<:AbstractString}, batch_size::Integer)::Nothing\n\n\n\n\n\n","category":"method"},{"location":"api/#GHOST.query_commits-Tuple{AbstractString}","page":"API","title":"GHOST.query_commits","text":"query_commits(branch::AbstractString)::Nothing\n\n\n\n\n\n","category":"method"},{"location":"api/#GHOST.setup-Tuple{}","page":"API","title":"GHOST.setup","text":"setup(;host::AbstractString = get(ENV, \"PGHOST\", \"localhost\"),\n       port::AbstractString = get(ENV, \"PGPORT\", \"5432\"),\n       dbname::AbstractString = get(ENV, \"PGDATABASE\", \"postgres\"),\n       user::AbstractString = get(ENV, \"PGUSER\", \"postgres\"),\n       password::AbstractString = get(ENV, \"PGPASSWORD\", \"postgres\"),\n       schema::AbstractString = \"gh_2007_$(year(floor(now(utc_tz), Year) - Day(1)))\",\n       pats::Union{Nothing, Vector{GitHubPersonalAccessToken}} = nothing)\n\nSets up your PostgreSQL database for the project.\n\nExample\n\njulia> setup(pats = [GitHubPersonalAccessToken(\"MyGH_Login\", ENV[\"GH_PAT\"])])\n\n\njulia> setup()\n\n\n\n\n\n\n","category":"method"},{"location":"api/#GHOST.setup_parallel","page":"API","title":"GHOST.setup_parallel","text":"setup_parallel(limit::Integer = 0; password::AbstractString = get(ENV, \"PGPASSWORD\", \"postgres\"))::Nothing\n\nSetup workers.\n\n\n\n\n\n","category":"function"},{"location":"api/#Private","page":"API","title":"Private","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [GHOST]\nPublic = false","category":"page"},{"location":"api/#GHOST.GH_FIRST_REPO_TS","page":"API","title":"GHOST.GH_FIRST_REPO_TS","text":"GH_FIRST_REPO_TS::DateTime = 2007-10-29T14:37:16\n\nTimestamp when the earliest public GitHub repository was created (id: \"MDEwOlJlcG9zaXRvcnkx\", nameWithOwner: \"mojombo/grit\")\n\n\n\n\n\n","category":"constant"},{"location":"api/#GHOST.GITHUB_GRAPHQL_ENDPOINT","page":"API","title":"GHOST.GITHUB_GRAPHQL_ENDPOINT","text":"GITHUB_GRAPHQL_ENDPOINT::String = \"https://api.github.com/graphql\"\n\nGitHub API v4 GraphQL API endpoint.\n\n\n\n\n\n","category":"constant"},{"location":"api/#GHOST.GITHUB_REST_ENDPOINT","page":"API","title":"GHOST.GITHUB_REST_ENDPOINT","text":"GITHUB_REST_ENDPOINT::String = \"https://api.github.com\"\n\nGitHub API v3 RESTful root endpoint.\n\n\n\n\n\n","category":"constant"},{"location":"api/#GHOST.Limits","page":"API","title":"GHOST.Limits","text":"Limits\n\nGitHub API limits.\n\nIt includes how many remaining queries are available for the current time period and when it resets.\n\nFields\n\nlimit::UInt16\nremaining::UInt16\nreset::DateTime\n\n\n\n\n\n","category":"type"},{"location":"api/#GHOST.cleanintervals-Tuple{Any}","page":"API","title":"GHOST.cleanintervals","text":"cleanintervals(row)\n\nReturns the input if the count is 1,000 records or fewer. If there are more than a 1,000 it splits them based on the ratio of the count.\n\n\n\n\n\n","category":"method"},{"location":"api/#GHOST.fill_missing_intervals-Tuple{AbstractString,DataFrames.AbstractDataFrame}","page":"API","title":"GHOST.fill_missing_intervals","text":"fill_missing_intervals(spdx::AbstractString, data::AbstractDataFrame)\n\n\n\n\n\n","category":"method"},{"location":"api/#GHOST.find_repo_count_for_intervals-Tuple{AbstractString,AbstractArray{var\"#s23\",1} where var\"#s23\"<:(Interval{Dates.DateTime,L,R} where R<:Intervals.Bound where L<:Intervals.Bound)}","page":"API","title":"GHOST.find_repo_count_for_intervals","text":"find_repo_count_for_intervals(spdx::AbstractString, created::AbstractVector{<:Interval{DateTime}})\n\n\n\n\n\n","category":"method"},{"location":"api/#GHOST.format_tsrange-Tuple{Interval{Dates.DateTime,L,R} where R<:Intervals.Bound where L<:Intervals.Bound}","page":"API","title":"GHOST.format_tsrange","text":"format_tsrange(obj::Interval{ZonedDateTime})\n\nReturn the Postgres compatible form.\n\n\n\n\n\n","category":"method"},{"location":"api/#GHOST.parse_author-Tuple{Any}","page":"API","title":"GHOST.parse_author","text":"parse_author(node)::NamedTuple\n\nThis parses the email, name, and ID of the author node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GHOST.parse_commit-Tuple{Any,Any}","page":"API","title":"GHOST.parse_commit","text":"parse_commit(branch, node)::NamedTuple\n\nThis parses a commit node and adds the branch it queried.\n\n\n\n\n\n","category":"method"},{"location":"api/#GHOST.parse_repo-Tuple{Any,AbstractString}","page":"API","title":"GHOST.parse_repo","text":"parse_repo(node, spdx::AbstractString)::NamedTuple\n\nParses a node and returns a suitable NamedTuple for the table.\n\n\n\n\n\n","category":"method"},{"location":"api/#GHOST.prune-Tuple{Any}","page":"API","title":"GHOST.prune","text":"prune(data)\n\nPrune the intervals based on the created and count values.\n\n\n\n\n\n","category":"method"},{"location":"api/#GHOST.query_intervals-Tuple{Array{Array{Interval{Dates.DateTime,Intervals.Closed,Intervals.Open},1},1}}","page":"API","title":"GHOST.query_intervals","text":"query_intervals(created::AbstractVector{<:AbstractVector{Interval{ZonedDateTime}}})::DataFrame\n\nReturns a \n\n\n\n\n\n","category":"method"},{"location":"api/#GHOST.query_intervals-Tuple{Array{Interval{Dates.DateTime,Intervals.Closed,Intervals.Open},1}}","page":"API","title":"GHOST.query_intervals","text":"query_intervals(spdx::AbstractString, created::AbstractVector{<:Interval{ZonedDateTime}})\n\nReturn count of search results based on the license for each created interval.\n\n\n\n\n\n","category":"method"},{"location":"manual/#Manual","page":"Manual","title":"Manual","text":"","category":"section"},{"location":"manual/#Getting-Started","page":"Manual","title":"Getting Started","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"GHOST.jl can be installed from the repository through:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"using Pkg\nPkg.add(url = \"https://github.com/uva-bi-sdad/GHOST.jl\")","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"to load the package, use","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"using GHOST","category":"page"},{"location":"manual/#Licenses","page":"Manual","title":"Licenses","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"GitHub can recognize certain licenses for repositories per their documentation. We filter out the machine-detectable licenses that are approved by the Open Source Initiative based on the SPDX Working Group SPDX License List data.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"info: Info\nSPDX stands for Software Package Data Exchange open standard for communicating software bill of material information (including components, licenses, copyrights, and security references).","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"The following licenses are machine-detectable OSI-approved licenses.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"SPDX Name\n0BSD BSD Zero Clause License\nAFL-3.0 Academic Free License v3.0\nAGPL-3.0 GNU Affero General Public License v3.0\nApache-2.0 Apache License 2.0\nArtistic-2.0 Artistic License 2.0\nBSD-2-Clause BSD 2-Clause \"Simplified\" License\nBSD-3-Clause BSD 3-Clause \"New\" or \"Revised\" License\nBSL-1.0 Boost Software License 1.0\nCECILL-2.1 CeCILL Free Software License Agreement v2.1\nECL-2.0 Educational Community License v2.0\nEPL-1.0 Eclipse Public License 1.0\nEPL-2.0 Eclipse Public License 2.0\nEUPL-1.1 European Union Public License 1.1\nEUPL-1.2 European Union Public License 1.2\nGPL-2.0 GNU General Public License v2.0 only\nGPL-3.0 GNU General Public License v3.0 only\nISC ISC License\nLGPL-2.1 GNU Lesser General Public License v2.1 only\nLGPL-3.0 GNU Lesser General Public License v3.0 only\nLPPL-1.3c LaTeX Project Public License v1.3c\nMIT MIT License\nMPL-2.0 Mozilla Public License 2.0\nMS-PL Microsoft Public License\nMS-RL Microsoft Reciprocal License\nNCSA University of Illinois/NCSA Open Source License\nOFL-1.1 SIL Open Font License 1.1\nOSL-3.0 Open Software License 3.0\nPostgreSQL PostgreSQL License\nUPL-1.0 Universal Permissive License v1.0\nUnlicense The Unlicense\nZlib zlib License","category":"page"},{"location":"manual/#Collection-Strategy","page":"Manual","title":"Collection Strategy","text":"","category":"section"},{"location":"manual/#Universe","page":"Manual","title":"Universe","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"We are interested in finding every repository on GitHub that fits the following criteria:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Is public\nHas a machine detectable OSI-approved license\nIs not a fork\nIs not a mirror\nIs not archived","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"info: Info\nThe oldest repository by creation time on GitHub dates back to 2007-10-29T14:37:16+00.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"In the GitHub search syntax the following criteria is denoted by","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"{\n  search(query: \"is:public fork:false mirror:false archived:false license:$spdx created:2007-10-29T14:37:16+00..2020-01-01T00:00:00+00\", type: REPOSITORY) {\n    repositoryCount\n  }\n}","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"where $spdx a license keyword (e.g., mit).","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"warning: Warning\nGitHub only allows to query up to 1,000 results per search connection result. If a query returns over 1,000 results, only the first 1,000 are accessible. In order to be able to collect every repository of interest we query based on:     - license (e.g., spdx:mit)     - when it was created (e.g., created:2010-01-01T00:00:00+00..2010-02-01T00:00:00+00) We shrink intervals until the result count is 1,000 or fewer.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"created:2010-01-01T00:00:00+00..2010-01-01T12:00:00+00 1,850\n\ncreated:2010-01-01T00:00:00+00..2010-01-01T12:00:00+00 998\ncreated:2010-01-01T12:00:00+00..2010-01-02T00:00:00+00 952","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"We then prune intervals to obtain the least amount of valid intervals that cover the full time period.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"For example,","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"spdx created count asof done\nzlib [\"2007-10-29 00:00:00\",\"2014-09-04 00:00:00\") 999 2020-05-14 18:48:03 FALSE\nzlib [\"2014-09-04 00:00:00\",\"2016-12-09 00:00:00\") 998 2020-05-14 18:48:03 FALSE\nzlib [\"2016-12-09 00:00:00\",\"2018-12-21 00:00:00\") 998 2020-05-14 18:48:03 FALSE\nzlib [\"2018-12-21 00:00:00\",\"2020-01-01 00:00:00\") 562 2020-05-14 18:48:03 FALSE","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"info: Info\nThis is table gh_2007_2021.queries.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"The queries table is used to store the queries and track their status. Once all the records have been obtained for the repos table their done status becomes TRUE.","category":"page"},{"location":"manual/#Repository-base-branch","page":"Manual","title":"Repository base branch","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"The commit data for a Git repository is dependent on the base branch.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"The repos table contains the GitHub repository global node ID and the global node ID for the base branch of the repository.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"id basebranchid asof status\nMDEwOlJlcG9zaXRvcnkyMzgzNTcxMTI= MDM6UmVmMjM4MzU3MTEyOm1hc3Rlcg== 2020-05-14 19:49:10+00 Ready","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"info: Info\nThis is table gh_2007_2021.repos.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"The various status values include:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Ready: We will commence collecting commit data from it.\nUnavailable: Repository is not accessible (e.g., deleted of made private NOT_FOUND, DMCA takedown)\nError: Something weird happened such as someone Git force pushing and changing the history during the scrape process.","category":"page"},{"location":"manual/#Commits","page":"Manual","title":"Commits","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"For each repository, we query the commit data based on the time coverage of the data collection.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"The commits table contains this data and is used to update the status of the repository commit data at the repos table.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"note: Note\nCommit users may show with a NULL login which indicates that the commit email does not match those associated with any GitHub account.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"note: Note\nCommit timestamps sometimes may have have strange dates dating back before the creation of version control (usually the Epoch time). For those commits, we replace the value with the earliest commit date in that repository that seems valid.","category":"page"},{"location":"manual/#Relational-Database","page":"Manual","title":"Relational Database","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"Table Column Description\nlicenses spdx Software Package Data Exchange License ID\nlicenses name Name of the license\nqueries spdx The SPDX license ID\nqueries created The time interval for the query\nqueries count How many results for the query\nqueries asof When was GitHub queried about the information.\nqueries done Has the repositories been collected?\nrepos id Repository ID\nrepos spdx SPDX license ID\nrepos slug Location of the respository\nrepos createdat When was the repository created on GitHub?\nrepos description Description of the respository\nrepos primarylanguage Primary language of the respository\nrepos branch Base branch ID\nrepos commits Number of commits in the branch until the end of the observation period\nrepos asof When was GitHub queried?\nrepos status Status of collection effort\ncommits branch Base Branch ID (foreign key)\ncommits id Commit ID\ncommits oid Git Object ID (SHA1)\ncommits committedat When was it committed?\ncommits authors_email The email in the Git commit.\ncommits authors_name The name in the Git commit.\ncommits authors_id GitHub Author\ncommits additions The number of additions in this commit.\ncommits deletions The number of deletions in this commit.\ncommits asof When was GitHub queried.","category":"page"},{"location":"manual/#How-To-Use","page":"Manual","title":"How To Use","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"In order to use this package, refer to API section in the documentation, the examples in the test suite, the CI and pipeline scripts.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"info: Info\nAdditional documentation is forthcoming once the API interface is stabilized.","category":"page"},{"location":"manual/#Requirements","page":"Manual","title":"Requirements","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"GitHub Personal Access Tokens with public access\nJulia v1 (current release v1.5.3)\nA PostgreSQL database connection (tested with v11-v13)","category":"page"},{"location":"#GHOST.jl","page":"Introduction","title":"GHOST.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"GHOST.jl is an open-sourced Julia package to collect and track GitHub activity as well as user information particularly useful for software analytic and socio-economic research. It addresses an unmet need for collecting variables currently missing from other existing projects (e.g., license information, multiple authors per commits, lines added/deleted, Twitter accounts). A significant contribution is the use of the GitHub v4 GraphQL API as opposed to the REST API, which allows major gains in the efficiency of the collection process. A component of the implementation design is that it does not aim to be comprehensive but selective in what data to capture while allowing methods to re-use data already available through other projects.","category":"page"}]
}
